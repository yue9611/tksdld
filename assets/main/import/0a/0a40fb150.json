[1,["30r4TqYh9HD5aN3GYRM0IZ","1dyAMWV2lO6oBGqUeWMhJn","86PtMAebVOs4l/zvOuyF1s@6c48a","86PtMAebVOs4l/zvOuyF1s@f9941","a7bF6HtT5B7J7SEfMEVpbi@f9941","e2M2qSkEZPT6aWPejNSRgD@f9941","c0roJe2OJCtY7mHBS5O6uM@f9941","73Za1P6TJGPbfaMwiT6uPZ@f9941","a2VHEFKOdKu7Z+71ZjWIL5@f9941","a7bF6HtT5B7J7SEfMEVpbi@6c48a","e2M2qSkEZPT6aWPejNSRgD@6c48a"],["node","_spriteFrame","_textureSource","_parent","_effectAsset","_cameraComponent","bar","platformConfig","scene","_customMaterial","mat"],[["cc.Node",["_name","_layer","_id","_objFlags","_components","_parent","_lpos","_children"],-1,9,1,5,2],["cc.Sprite",["_sizeMode","_isTrimmedMode","_type","node","_spriteFrame","__prefab","_customMaterial"],0,1,6,4,6],"cc.SpriteFrame",["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["dcc1fC1BMVGYoDaYaaesjp4",["type","videoAdUnitId","appId","heyDrawerGameAdUnitId","node"],-1,1],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node","__prefab"],0,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_props","_states","_defines"],0],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_parent","_components","_lpos"],2,1,2,5],["cc.CompPrefabInfo",["fileId"],2],["cc.Canvas",["node","__prefab","_cameraComponent"],3,1,4,1],["4805ccI48pCd6oESz6VFiBg",["totalLength","node","platformConfig","bar","mat"],2,1,1,1,6],["cc.Scene",["_name","_children","_globals"],2,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.Camera",["_projection","_priority","_orthoHeight","_far","_clearFlags","_visibility","node","_color"],-3,1,5]],[[10,0,2],[3,0,2,1,1],[0,0,1,5,4,6,3],[0,0,5,4,2],[5,0,1,2,3,4],[6,0,1,2,4],[7,0,1,2,4],[8,0,2],[0,0,1,2,7,4,6,4],[0,0,2,7,3],[0,0,1,5,4,3],[0,0,3,1,5,7,4,6,4],[0,0,3,1,5,4,6,4],[9,0,1,2,3,2],[3,0,2,1,3,1],[3,0,1,1],[11,0,1,2,1],[5,0,3,4,2],[12,0,1,2,3,4,2],[1,0,1,3,5,4,3],[1,0,1,3,5,6,4,3],[1,2,0,3,5,4,3],[1,2,0,1,3,5,4,4],[1,3,4,1],[1,3,5,4,1],[13,0,1,2,2],[14,0,1,2,3,1],[15,1],[16,0,1],[17,1],[18,1],[19,0,1,2,3,4,5,6,7,7],[4,4,1],[4,0,2,3,1,4,5],[4,0,1,4,3]],[[[[5,"autoTile",[{"hash":2624550465,"name":"autoTile|vs:vert|fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n#endif\nlayout(set = 1, binding = 1) uniform tile {\n  vec4 offsetTile;\n};\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    vec2 uvw = vec2(uv0.x,uv0.y);\n    uvw.x *= offsetTile.z;\n    uvw.x -= cc_time.x * 0.3;\n    uvw.x = fract(uvw.x);\n    uvw.y *= offsetTile.w;\n    uvw.y += cc_time.x * 0.3;\n    uvw.y = fract(uvw.y);\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uvw);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nlayout(std140) uniform tile {\n  vec4 offsetTile;\n};\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    vec2 uvw = vec2(uv0.x,uv0.y);\n    uvw.x *= offsetTile.z;\n    uvw.x -= cc_time.x * 0.3;\n    uvw.x = fract(uvw.x);\n    uvw.y *= offsetTile.w;\n    uvw.y += cc_time.x * 0.3;\n    uvw.y = fract(uvw.y);\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uvw);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n#endif\nuniform highp vec4 cc_time;\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\n   uniform vec4 offsetTile;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    vec2 uvw = vec2(uv0.x,uv0.y);\n    uvw.x *= offsetTile.z;\n    uvw.x -= cc_time.x * 0.3;\n    uvw.x = fract(uvw.x);\n    uvw.y *= offsetTile.w;\n    uvw.y += cc_time.x * 0.3;\n    uvw.y = fract(uvw.y);\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uvw);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":46,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"tile","stageFlags":16,"binding":1,"members":[{"name":"offsetTile","type":16,"count":1}],"defines":[]}],"samplerTextures":[],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":1,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"name":"autoTile","passes":[{"program":"autoTile|vs:vert|fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":2},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"offsetTile":{"type":16,"value":[0,0,1,1],"editor":{"tooltip":"x:X轴偏移量占图片宽度的比例，y:Y轴偏移量占图片高度的比例；z:X轴平铺数量，w:Y轴平铺数量"}}}}]}]]],0,0,[],[],[]],[[[6,[{"alphaThreshold":0.1}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[4],[1]],[[{"name":"matchBg","rect":{"x":0,"y":0,"width":750,"height":1334},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":1334},"rotated":false,"capInsets":[0,0,0,0],"texture":"863ed300-79b5-4eb3-897f-cef3aec85d6c@6c48a","packable":false}],[2],0,[0],[2],[2]],[[[7,"Init"],[8,"Canvas",33554432,"f6r0Bech9FX65cPqsn8FC9",[-8,-9,-10,-11,-12,-13],[[1,-1,[0,"0dngp/9gNO34wUQjZfN/CX"],[5,750,1334]],[16,-3,[0,"3f2oTdCepERZdpmIfLsrhd"],-2],[17,45,-4,[0,"e8a+bU/8dPDbbJguUzLdoF"]],[18,535,-7,-6,-5,7]],[1,375,667,0]],[9,"PlatformConfig","5aEmsIDk9BL4EzVF4jy2KE",[-14,-15,-16]],[2,"bg",33554432,1,[[1,-17,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[19,0,false,-18,[0,"e71ctEmpxFC4KlSYRZNz/a"],0],[4,45,750,1334,-19]],[1,0,0,10]],[10,"iconLayer",33554432,1,[[1,-20,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[20,0,false,-21,[0,"e71ctEmpxFC4KlSYRZNz/a"],1,2],[4,45,200,200,-22]]],[11,"barBg",512,33554432,1,[-25],[[1,-23,[0,"f7NISe7HdAD68SLfhnddy8"],[5,510,46]],[21,1,0,-24,[0,"e71ctEmpxFC4KlSYRZNz/a"],5]],[1,0,-100,0]],[12,"bar",512,33554432,5,[[14,-26,[0,"f7NISe7HdAD68SLfhnddy8"],[5,75,74],[0,0,0.5]],[22,2,0,false,-27,[0,"e71ctEmpxFC4KlSYRZNz/a"],4]],[1,-267.5,0,0]],[25,"Init",[1,2],[26,[27],[28,[4,4283190348]],[29],[30]]],[2,"logo",33554432,1,[[15,-28,[5,598,328]],[23,-29,3]],[1,0,450,0]],[2,"loading",33554432,1,[[1,-30,[0,"c9LcbFFklMx5gy+Tj2mduU"],[5,372,268]],[24,-31,[0,"daPeZJgDVEhYPPaoyJH9ME"],6]],[1,0,120,0]],[13,"Camera",1,[-32],[1,0,0,1000]],[31,0,1073741824,667,2000,6,41943040,10,[4,4278190080]],[3,"PlatformConfig_PC",2,[[32,-33]]],[3,"PlatformConfig_HeyGameOPPO",2,[[33,11,"30552609","338142",["338141"],-34]]],[3,"PlatformConfig_HeyGameVIVO",2,[[34,12,["23eb66da755946c7aea160720b0a74cf"],-35]]]],0,[0,0,1,0,5,11,0,0,1,0,0,1,0,6,6,0,7,2,0,0,1,0,-1,10,0,-2,3,0,-3,4,0,-4,8,0,-5,5,0,-6,9,0,-1,12,0,-2,13,0,-3,14,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,-1,6,0,0,6,0,0,6,0,0,8,0,0,8,0,0,9,0,0,9,0,-1,11,0,0,12,0,0,13,0,0,14,0,8,7,1,3,7,2,3,7,35],[0,0,0,0,0,0,0,0],[1,9,1,1,1,1,1,10],[3,0,4,5,6,7,8,0]],[[{"name":"matchBgIcon","rect":{"x":0,"y":0,"width":200,"height":200},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"a76c5e87-b53e-41ec-9ed2-11f3045696e2@6c48a","packable":false}],[2],0,[0],[2],[9]],[[{"name":"logo","rect":{"x":1,"y":0,"width":598,"height":328},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":601,"height":329},"rotated":false,"capInsets":[0,0,0,0],"texture":"e2336a92-9046-4f4f-a696-3de8cd491803@6c48a","packable":false}],[2],0,[0],[2],[10]]]]
