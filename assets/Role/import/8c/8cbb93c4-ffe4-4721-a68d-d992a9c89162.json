[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"atkScope2",[{"hash":1926736781,"name":"atkScope2|vs:vert|fs:atkScope","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_color;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_color;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_uv = a_texCoord;\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_color;\nlayout(set = 1, binding = 0) uniform Constant {\n  vec4 mainColor;\n  vec4 scope;\n  float minOpacity;\n};\nfloat getOpcity () {\n  float radian = scope.x * 0.5;\n  if(radian <= 0.0){\n    radian = 0.001;\n  }\n  float l = 0.5 / cos(radian);\n  vec2 pos = v_uv - vec2(l + 0.5, 0.5);\n  float dis = dot(pos,pos);\n  float r = 0.5 * tan(radian);\n  if(dis >= r * r){\n    return 1.0;\n  }\n  float d = l - 0.5;\n  dis = sqrt(dis);\n  return (dis - d) / (r - d);\n}\nvec4 atkScope () {\n  if (v_uv.x <= 0.5) {\n    discard;\n  }\n  vec2 pos = v_uv.xy - vec2(0.5, 0.5);\n  float dis = dot(pos, pos);\n  if (dis > 0.25 || dis < scope.w * scope.w) {\n    discard;\n  }\n  float r = atan(pos.y, pos.x);\n  if (r > scope.x * 0.5 || r < -0.5 * scope.x) {\n    discard;\n  }\n  vec4 o = mainColor * v_color;\n  o.a = scope.y - sqrt(dis) * 2.0 * (scope.y - scope.z);\n  float a = getOpcity();\n  a *= o.a;\n  a = a < minOpacity ? minOpacity : a;\n  o.a = mainColor.a * a;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = atkScope(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_texCoord;\nout vec2 v_uv;\nout vec4 v_color;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_uv = a_texCoord;\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nin vec2 v_uv;\nin vec4 v_color;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 scope;\n  float minOpacity;\n};\nfloat getOpcity () {\n  float radian = scope.x * 0.5;\n  if(radian <= 0.0){\n    radian = 0.001;\n  }\n  float l = 0.5 / cos(radian);\n  vec2 pos = v_uv - vec2(l + 0.5, 0.5);\n  float dis = dot(pos,pos);\n  float r = 0.5 * tan(radian);\n  if(dis >= r * r){\n    return 1.0;\n  }\n  float d = l - 0.5;\n  dis = sqrt(dis);\n  return (dis - d) / (r - d);\n}\nvec4 atkScope () {\n  if (v_uv.x <= 0.5) {\n    discard;\n  }\n  vec2 pos = v_uv.xy - vec2(0.5, 0.5);\n  float dis = dot(pos, pos);\n  if (dis > 0.25 || dis < scope.w * scope.w) {\n    discard;\n  }\n  float r = atan(pos.y, pos.x);\n  if (r > scope.x * 0.5 || r < -0.5 * scope.x) {\n    discard;\n  }\n  vec4 o = mainColor * v_color;\n  o.a = scope.y - sqrt(dis) * 2.0 * (scope.y - scope.z);\n  float a = getOpcity();\n  a *= o.a;\n  a = a < minOpacity ? minOpacity : a;\n  o.a = mainColor.a * a;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = atkScope(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvarying vec4 v_color;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_uv = a_texCoord;\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 v_uv;\nvarying vec4 v_color;\n   uniform vec4 mainColor;\n   uniform vec4 scope;\n   uniform float minOpacity;\nfloat getOpcity () {\n  float radian = scope.x * 0.5;\n  if(radian <= 0.0){\n    radian = 0.001;\n  }\n  float l = 0.5 / cos(radian);\n  vec2 pos = v_uv - vec2(l + 0.5, 0.5);\n  float dis = dot(pos,pos);\n  float r = 0.5 * tan(radian);\n  if(dis >= r * r){\n    return 1.0;\n  }\n  float d = l - 0.5;\n  dis = sqrt(dis);\n  return (dis - d) / (r - d);\n}\nvec4 atkScope () {\n  if (v_uv.x <= 0.5) {\n    discard;\n  }\n  vec2 pos = v_uv.xy - vec2(0.5, 0.5);\n  float dis = dot(pos, pos);\n  if (dis > 0.25 || dis < scope.w * scope.w) {\n    discard;\n  }\n  float r = atan(pos.y, pos.x);\n  if (r > scope.x * 0.5 || r < -0.5 * scope.x) {\n    discard;\n  }\n  vec4 o = mainColor * v_color;\n  o.a = scope.y - sqrt(dis) * 2.0 * (scope.y - scope.z);\n  float a = getOpcity();\n  a *= o.a;\n  a = a < minOpacity ? minOpacity : a;\n  o.a = mainColor.a * a;\n  return o;\n}\nvoid main() { gl_FragColor = atkScope(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":46,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":3}},"defines":[],"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1},{"name":"scope","type":16,"count":1},{"name":"minOpacity","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"name":"transparent","passes":[{"program":"atkScope2|vs:vert|fs:atkScope","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":2},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"minOpacity":{"type":13,"value":[0.2]},"scope":{"type":16,"value":[1.57,0.8,0.5,0.05],"editor":{"tooltip":"x:攻击范围夹角弧度，y: 中心点透明度，z：边缘透明度，w：中间的孔的半径大小"}}}}]}]]],0,0,[],[],[]]
